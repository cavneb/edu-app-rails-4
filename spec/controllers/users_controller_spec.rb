require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do
  # This should return the minimal set of attributes required to create a valid
  # LtiApp. As you add validations to LtiApp, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {{
        email: "mine@example.com",
        name: "John Doe",
        password: "1234567890",
        password_confirmation: "1234567890"
      }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LtiAppsController. Be sure to keep this updated too.
  let(:user){ User.create! valid_attributes }
  let(:valid_session) { {"user_id" => user.id} }

  describe "GET new" do
    it "assigns a new user as @user" do
      get :new, {}, {}
      assigns(:user).should be_a_new(User)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {user: valid_attributes}, {}
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {user: valid_attributes}, {}
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the home page with the user logged in" do
        post :create, {user: valid_attributes}, {}
        response.should redirect_to(root_url)
        session["user_id"].should == assigns(:user).id
      end
    end

    describe "with invalid params" do
      let(:invalid_params) {{user: {key: "invalid"}}}
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, {user: {key: "invalid"}}, {}
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, {user: {key: "invalid"}}, {}
        response.should render_template("new")
      end
    end

    describe "unique validations" do
      it "requires password" do
        valid_attributes.delete(:password)
        valid_attributes.delete(:password_confirmation)
        post :create, {user: valid_attributes}, {}
        response.should render_template("new")
      end

      it "requires password confirmation" do
        valid_attributes.delete(:password_confirmation)
        post :create, {user: valid_attributes}, {}
        response.should render_template("new")
      end

      it "requires email" do
        valid_attributes.delete(:email)
        post :create, {user: valid_attributes}, {}
        response.should render_template("new")
      end

      it "requires email confirmation" do
        post :create, {user: valid_attributes}, {}

        user = assigns(:user)
        email = valid_attributes[:email]

        user.email.should be_nil
        user.registration_codes.where(email: email).count.should == 1
      end
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      get :edit, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
    end

    it "gets the email from the newest registration code" do
      user.registration_codes << RegistrationCode.new(email: 'new@example.com')
      user.registration_codes << code = RegistrationCode.new(email: 'newest@example.com')
      get :edit, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
      assigns(:user).email.should == 'newest@example.com'
      assigns(:confirmation_required).should == true
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:updated_attributes) {{
          url: "http://www.example.com",
          name: "Jane Doe",
      }}

      it "updates the current user" do
        put :update, {user: updated_attributes}, valid_session
        response.should redirect_to(action: :edit)
        assigns(:user).should == user
        assigns(:user).url.should == updated_attributes[:url]
        assigns(:user).name.should == updated_attributes[:name]
      end

      it "creates a registration code when the email changes" do
        put :update, {user: {email: email = 'new@example.com'}}, valid_session
        response.should redirect_to(action: :edit)
        assigns(:user).email.should_not == email
        assigns(:user).registration_codes.first.email.should == email
      end

      it "only keeps the most recent registration code" do
        put :update, {user: {email: email = 'new@example.com'}}, valid_session
        put :update, {user: {email: email = 'newer@example.com'}}, valid_session
        assigns(:user).registration_codes.count.should == 1
      end

      it "removes the registration code if the user sets their email back to the original" do
        put :update, {user: {email: email = 'new@example.com'}}, valid_session
        put :update, {user: valid_attributes}, valid_session
        assigns(:user).registration_codes.count.should == 0
      end

      it "updates the current user's email using a valid code" do
        code = user.registration_codes.create(email: email = 'new@example.com')
        put :update, {user: updated_attributes.merge(code: code.code)}, valid_session
        assigns(:user).email.should == email
        assigns(:user).registration_codes.count.should == 0
      end

      it "merges duplicate users when changing email addresses" do
        old_user = User.create(valid_attributes.merge(email: email = 'new@example.com'))
        code = user.registration_codes.create(email: email)
        put :update, {user: updated_attributes.merge(code: code.code)}, valid_session
        User.where(email: email).count.should == 1
        User.where(email: email).first.should == assigns(:user)
      end
    end
  end

  describe "GET edit_password" do
    pending "add some examples for edit_password"
  end

  describe "PATCH update_password" do
    pending "add some examples for update_password"
  end

  #email confirmation (password reset?)
  describe "GET users_update" do
    it "updates a user's email address based on a code without a session" do
      code = user.registration_codes.create(email: email = 'new@example.com')
      put :update_email, {code: code.code}, {}
      response.should redirect_to(action: :edit)
      session[:user_id].should == user.id
      user.reload
      user.email.should == email
    end
  end
end
